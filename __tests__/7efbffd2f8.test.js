// ********RoostGPT********
/*
Test generated by RoostGPT for test aman6March using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=63c801a396
ROOST_METHOD_SIG_HASH=7efbffd2f8


*/

// ********RoostGPT********
import request from 'supertest';
import express from 'express';
import mongoose from 'mongoose';
import bcrypt from 'bcrypt';
import jwt from 'jsonwebtoken';
import cookieParser from 'cookie-parser';
import User from '../models/User';
import app from '../index';

jest.mock('bcrypt');
jest.mock('jsonwebtoken');
jest.mock('../models/User');

describe("POST /login", () => {
  let server;

  beforeAll(() => {
    server = app.listen(3000);
  });

  afterAll(async (done) => {
    await server.close(done);
    await mongoose.connection.close();
  });

  it('should redirect to /register if user not found', async () => {
    User.findOne.mockResolvedValue(null);
    const response = await request(server)
      .post('/login')
      .send({email: 'test@test.com', password: 'password'});
    expect(response.header.location).toBe('/register');
  });

  it('should render login page with error message if password is incorrect', async () => {
    User.findOne.mockResolvedValue({password: 'hashedPassword'});
    bcrypt.compare.mockResolvedValue(false);
    const response = await request(server)
      .post('/login')
      .send({email: 'test@test.com', password: 'password'});
    expect(response.text).toContain('Incorrect Password');
  });

  it('should redirect to home page if login is successful', async () => {
    User.findOne.mockResolvedValue({_id: 'userId', password: 'hashedPassword'});
    bcrypt.compare.mockResolvedValue(true);
    jwt.sign.mockReturnValue('token');
    const response = await request(server)
      .post('/login')
      .send({email: 'test@test.com', password: 'password'});
    expect(response.header.location).toBe('/');
    expect(response.header['set-cookie']).toContain('token=token');
  });
});
