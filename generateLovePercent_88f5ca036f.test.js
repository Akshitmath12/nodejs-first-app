// ********RoostGPT********
// Test generated by RoostGPT for test NodeRepo using AI Type Open AI and AI Model gpt-4-1106-preview



// ********RoostGPT********
const generateLovePercent = require('./features');

describe('generateLovePercent', () => {
  beforeEach(() => {
    jest.spyOn(global.Math, 'random').mockReturnValue(0.42);
  });

  afterEach(() => {
    jest.spyOn(global.Math, 'random').mockRestore();
  });

  test('should generate a percentage string', () => {
    const percent = generateLovePercent();
    expect(typeof percent).toBe('string');
  });

  test('should generate a percentage with a "%" symbol at the end', () => {
    const percent = generateLovePercent();
    expect(percent).toMatch(/\d+%$/);
  });

  test('should generate a random percentage based on Math.random', () => {
    const percent = generateLovePercent();
    // Here we expect 42% because Math.random was mocked to return 0.42
    expect(percent).toBe('42%');
  });

  test('should generate a whole number percentage', () => {
    const percent = generateLovePercent();
    const numberPart = percent.replace('%', '');
    expect(Number.isInteger(+numberPart)).toBeTruthy();
  });

  test('should not generate a percentage lower than 0%', () => {
    jest.spyOn(global.Math, 'random').mockReturnValue(0.00);
    const percent = generateLovePercent();
    expect(percent).not.toBe('-1%');
  });

  test('should not generate a percentage higher than 99%', () => {
    jest.spyOn(global.Math, 'random').mockReturnValue(0.99999999);
    const percent = generateLovePercent();
    expect(percent).not.toBe('100%');
  });

  // This tests an edge case where Math.random could theoretically return 1 (though it's highly unlikely)
  test('should handle the edge case when Math.random returns 1', () => {
    jest.spyOn(global.Math, 'random').mockReturnValue(1);
    const percent = generateLovePercent();
    // When Math.random returns 1, it should still calculate a 99% since we're using double NOT bitwise operator
    expect(percent).toBe('99%');
  });
});

