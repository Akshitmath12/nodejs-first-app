// ********RoostGPT********
// Test generated by RoostGPT for test NodeRepo using AI Type Open AI and AI Model gpt-4



// ********RoostGPT********
import request from "supertest";
import express from "express";
import mongoose from "mongoose";
import User from "../models/User";
import app from "../index.js";

beforeAll(async () => {
  const url = `mongodb://localhost:27017/testdb`;
  await mongoose.connect(url, { useNewUrlParser: true });
});

afterAll(async () => {
  await mongoose.connection.close();
});

describe("POST /login", () => {
  beforeEach(async () => {
    await User.deleteMany({});
    const password = await bcrypt.hash("password123", 10);
    await User.create({ email: "test@example.com", password });
  });

  test("Login with correct credentials", async () => {
    const response = await request(app)
      .post("/login")
      .send({
        email: "test@example.com",
        password: "password123",
      });
    expect(response.header['set-cookie']).toBeDefined();
    expect(response.statusCode).toBe(302);
    expect(response.header.location).toBe("/");
  });

  test("Login with incorrect password", async () => {
    const response = await request(app)
      .post("/login")
      .send({
        email: "test@example.com",
        password: "wrongPassword",
      });
    expect(response.statusCode).toBe(200);
    expect(response.text).toContain("Incorrect Password");
  });

  test("Login with non-existent user", async () => {
    const response = await request(app)
      .post("/login")
      .send({
        email: "nonexistent@example.com",
        password: "password123",
      });
    expect(response.statusCode).toBe(302);
    expect(response.header.location).toBe("/register");
  });
});
