// ********RoostGPT********
// Test generated by RoostGPT for test NodeRepo using AI Type Open AI and AI Model gpt-4



// ********RoostGPT********
import express from "express";
import path from "path";
import mongoose from "mongoose";
import cookieParser from "cookie-parser";
import jwt from "jsonwebtoken";
import bcrypt from "bcrypt";
import { isAuthenticated } from './index.js';

// Mocking the express request and response objects
const mockRequest = (sessionData, body) => ({
  session: { data: sessionData },
  body,
});

const mockResponse = () => {
  const res = {};
  res.status = jest.fn().mockReturnValue(res);
  res.json = jest.fn().mockReturnValue(res);
  res.redirect = jest.fn().mockReturnValue(res);
  return res;
};

// Mocking User model
const User = {
  findById: jest.fn(),
};

// Mocking jwt.verify
jwt.verify = jest.fn();

describe("isAuthenticated", () => {
  test("should call next() if the token is valid", async () => {
    const req = mockRequest({}, { token: "validToken" });
    const res = mockResponse();
    const next = jest.fn();

    jwt.verify.mockReturnValueOnce({ _id: "userId" });
    User.findById.mockResolvedValueOnce({ _id: "userId" });

    await isAuthenticated(req, res, next);

    expect(next).toHaveBeenCalled();
  });

  test("should redirect to login if the token is not valid", async () => {
    const req = mockRequest({}, { token: "invalidToken" });
    const res = mockResponse();
    const next = jest.fn();

    jwt.verify.mockReturnValueOnce(null);
    User.findById.mockResolvedValueOnce(null);

    await isAuthenticated(req, res, next);

    expect(res.redirect).toHaveBeenCalledWith("/login");
  });
});
